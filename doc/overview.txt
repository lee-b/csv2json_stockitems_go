Overview
========

Goals
=====

* Import stock item data from csv format
* Export stock item data to json format
* Extensible code (as per requirements)
* Use go standard library facilities for actual csv/json I/O (to minimise new
  code, and assist with extensibility)
* Reusable code (partly to meet "extensible code", partly as best-practice)
* Precision control in currency values, to avoid floating point precision issues.
* Unit-tested
* Functionally tested on actual data files
* Verified against given scenario
* Verified on larger data set, proving streaming/big data should work
* "Production-ready", although this is a vague term without knowing requirements
  of the production environment in question.  The requirements I've assumed are:
    + Input validation / security
    + Big data (stream-based processing rather than loading all data into memory
       at once)
    + Reliability, as specified above in terms of tests, required features, etc.


Non-goals & assumptions
=======================

* Currency tracking and conversion is not a goal: input file has currency
  symbols, but they are all the same (dollars) and the output doesn't have an
  notion of currency, which suggests that this currency support is not needed
  for the purposes of the test.
* Quantities are assumed to be integers, as no examples are given of fractional
  values.
* Prices are assumed to have integer cents values (i.e., no fractions of a
  cent), as this fits the data presented in examples.
* Perfectly idiomatic Go (preferred style, preferred design patterns, etc.) is
  not a goal. I do not know Go yet, researching Go idioms extensively for all
  parts of the code could take too much time for the purposes of this test.
  Attempts have been made where reasonable, though, such as using JSON Reader/
  Writer, using iota rather than simply typing values, etc.
* A serialisation-style interface to the input CSV parsing, mirroring the
  marshalling of JSON output, would be ideal, especially for extensibility.
  Only a token version of this has been implemented (StockItem.Unmarshall), as
  it's not clear how future extensibility should work at present.
* Assumed that modifiers (which are paired fields) can either be specified, or
  not specified, but that one field should not be present without the other.
  If this happens, an error is reported
* The sample data, provided as a PDF from Word, contained soft-hypens in place
  of ASCII minus signs.  I've assumed ASCII minus signs were intended.
* JSON does not support "nil", except as a string, but it does support null.
  I've assumed that null was meant, to be compliant with standard JSON, and
  take advantage of automatic type-checking across languages, etc.  If nil was
  truly intended, I believe it could be easily implemented by providing
  a custom marshaller for the Monetary types in question.


Design
======

* Library of reusable code, independent of front-end, allowing code to be
  used in larger applications, and extended to new models / data types,
  without calling a command line program.  Library contains:
    + a definition of the StockItem structure
    + Sub-definitions for:
       - Monetary types (to avoid precision issues and assist with currency removal from csv)
       - Modifiers
    + Helper functions to marshall/unmarshall data from CSV and to JSON,
      only where the standard library cannot do it automatically.
* Simple, reliable, command-line / front-end interface.



Future improvements / wishlist
==============================

* Multiple currencies (swap out Cents for a Monetary type)
* Use go channels to create parallel input / parsing / output, for better
  overall throughput.
